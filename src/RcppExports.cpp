// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// sets_l2norm_cpp
double sets_l2norm_cpp(NumericVector v1, NumericVector v2);
RcppExport SEXP abSan_sets_l2norm_cpp(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v2(v2SEXP);
    __result = Rcpp::wrap(sets_l2norm_cpp(v1, v2));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type v2(v2SEXP );
        double __result = sets_l2norm_cpp(v1, v2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_nearest_vert_cpp
double sets_nearest_vert_cpp(NumericVector pt, NumericMatrix B);
RcppExport SEXP abSan_sets_nearest_vert_cpp(SEXP ptSEXP, SEXP BSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type pt(ptSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    __result = Rcpp::wrap(sets_nearest_vert_cpp(pt, B));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type pt(ptSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP );
        double __result = sets_nearest_vert_cpp(pt, B);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_inside_pt_cpp
bool sets_inside_pt_cpp(NumericVector vPt, NumericMatrix mG, NumericVector vC);
RcppExport SEXP abSan_sets_inside_pt_cpp(SEXP vPtSEXP, SEXP mGSEXP, SEXP vCSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type vPt(vPtSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP);
    __result = Rcpp::wrap(sets_inside_pt_cpp(vPt, mG, vC));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type vPt(vPtSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP );
        bool __result = sets_inside_pt_cpp(vPt, mG, vC);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_inside_pts_cpp
bool sets_inside_pts_cpp(NumericMatrix mPts, NumericMatrix mG, NumericVector vC);
RcppExport SEXP abSan_sets_inside_pts_cpp(SEXP mPtsSEXP, SEXP mGSEXP, SEXP vCSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type mPts(mPtsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP);
    __result = Rcpp::wrap(sets_inside_pts_cpp(mPts, mG, vC));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type mPts(mPtsSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP );
        bool __result = sets_inside_pts_cpp(mPts, mG, vC);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_inside_pts_idx_cpp
LogicalVector sets_inside_pts_idx_cpp(NumericMatrix mPts, NumericMatrix mG, NumericVector vC);
RcppExport SEXP abSan_sets_inside_pts_idx_cpp(SEXP mPtsSEXP, SEXP mGSEXP, SEXP vCSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type mPts(mPtsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP);
    __result = Rcpp::wrap(sets_inside_pts_idx_cpp(mPts, mG, vC));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type mPts(mPtsSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP );
        LogicalVector __result = sets_inside_pts_idx_cpp(mPts, mG, vC);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_nearest_line_cpp
double sets_nearest_line_cpp(NumericVector pt, NumericMatrix mG, NumericVector vC);
RcppExport SEXP abSan_sets_nearest_line_cpp(SEXP ptSEXP, SEXP mGSEXP, SEXP vCSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type pt(ptSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP);
    __result = Rcpp::wrap(sets_nearest_line_cpp(pt, mG, vC));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type pt(ptSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP );
        double __result = sets_nearest_line_cpp(pt, mG, vC);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_Hausdorrf_core_cpp
double sets_Hausdorrf_core_cpp(NumericMatrix mA, NumericMatrix mZ, NumericMatrix mG, NumericVector vC);
RcppExport SEXP abSan_sets_Hausdorrf_core_cpp(SEXP mASEXP, SEXP mZSEXP, SEXP mGSEXP, SEXP vCSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type mA(mASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mZ(mZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP);
    __result = Rcpp::wrap(sets_Hausdorrf_core_cpp(mA, mZ, mG, vC));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type mA(mASEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type mZ(mZSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP );
        double __result = sets_Hausdorrf_core_cpp(mA, mZ, mG, vC);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_unique_cpp
NumericMatrix sets_unique_cpp(const NumericMatrix mZ, double tol);
RcppExport SEXP abSan_sets_unique_cpp(SEXP mZSEXP, SEXP tolSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type mZ(mZSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    __result = Rcpp::wrap(sets_unique_cpp(mZ, tol));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericMatrix >::type mZ(mZSEXP );
        Rcpp::traits::input_parameter< double >::type tol(tolSEXP );
        NumericMatrix __result = sets_unique_cpp(mZ, tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_lineIntersect_cpp
SEXP sets_lineIntersect_cpp(const List set, const NumericVector dir, const double intersect);
RcppExport SEXP abSan_sets_lineIntersect_cpp(SEXP setSEXP, SEXP dirSEXP, SEXP intersectSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List >::type set(setSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< const double >::type intersect(intersectSEXP);
    __result = Rcpp::wrap(sets_lineIntersect_cpp(set, dir, intersect));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const List >::type set(setSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type dir(dirSEXP );
        Rcpp::traits::input_parameter< const double >::type intersect(intersectSEXP );
        SEXP __result = sets_lineIntersect_cpp(set, dir, intersect);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_GCtoZ_cpp
NumericMatrix sets_GCtoZ_cpp(NumericMatrix mG, NumericVector vC);
RcppExport SEXP abSan_sets_GCtoZ_cpp(SEXP mGSEXP, SEXP vCSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP);
    __result = Rcpp::wrap(sets_GCtoZ_cpp(mG, vC));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type vC(vCSEXP );
        NumericMatrix __result = sets_GCtoZ_cpp(mG, vC);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_ZGtoC_cpp
NumericVector sets_ZGtoC_cpp(NumericMatrix mZ, NumericMatrix mG);
RcppExport SEXP abSan_sets_ZGtoC_cpp(SEXP mZSEXP, SEXP mGSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type mZ(mZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP);
    __result = Rcpp::wrap(sets_ZGtoC_cpp(mZ, mG));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type mZ(mZSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type mG(mGSEXP );
        NumericVector __result = sets_ZGtoC_cpp(mZ, mG);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_ZtoGC_cpp
List sets_ZtoGC_cpp(NumericVector mZ);
RcppExport SEXP abSan_sets_ZtoGC_cpp(SEXP mZSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type mZ(mZSEXP);
    __result = Rcpp::wrap(sets_ZtoGC_cpp(mZ));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type mZ(mZSEXP );
        List __result = sets_ZtoGC_cpp(mZ);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// sets_shape_preserve_cpp
NumericMatrix sets_shape_preserve_cpp(List set, double dTol);
RcppExport SEXP abSan_sets_shape_preserve_cpp(SEXP setSEXP, SEXP dTolSEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type set(setSEXP);
    Rcpp::traits::input_parameter< double >::type dTol(dTolSEXP);
    __result = Rcpp::wrap(sets_shape_preserve_cpp(set, dTol));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type set(setSEXP );
        Rcpp::traits::input_parameter< double >::type dTol(dTolSEXP );
        NumericMatrix __result = sets_shape_preserve_cpp(set, dTol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// abSan_C_cpp
NumericMatrix abSan_C_cpp(int iA, const List set, const NumericVector vPun, const List model, const bool print_output, bool boCountFrom1);
RcppExport SEXP abSan_abSan_C_cpp(SEXP iASEXP, SEXP setSEXP, SEXP vPunSEXP, SEXP modelSEXP, SEXP print_outputSEXP, SEXP boCountFrom1SEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type iA(iASEXP);
    Rcpp::traits::input_parameter< const List >::type set(setSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type vPun(vPunSEXP);
    Rcpp::traits::input_parameter< const List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const bool >::type print_output(print_outputSEXP);
    Rcpp::traits::input_parameter< bool >::type boCountFrom1(boCountFrom1SEXP);
    __result = Rcpp::wrap(abSan_C_cpp(iA, set, vPun, model, print_output, boCountFrom1));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type iA(iASEXP );
        Rcpp::traits::input_parameter< const List >::type set(setSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type vPun(vPunSEXP );
        Rcpp::traits::input_parameter< const List >::type model(modelSEXP );
        Rcpp::traits::input_parameter< const bool >::type print_output(print_outputSEXP );
        Rcpp::traits::input_parameter< bool >::type boCountFrom1(boCountFrom1SEXP );
        NumericMatrix __result = abSan_C_cpp(iA, set, vPun, model, print_output, boCountFrom1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// abSan_rComponent_cpp
NumericMatrix abSan_rComponent_cpp(int iA, const List set, const NumericVector vPun, const List model, const bool print_output, bool boCountFrom1);
RcppExport SEXP abSan_abSan_rComponent_cpp(SEXP iASEXP, SEXP setSEXP, SEXP vPunSEXP, SEXP modelSEXP, SEXP print_outputSEXP, SEXP boCountFrom1SEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type iA(iASEXP);
    Rcpp::traits::input_parameter< const List >::type set(setSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type vPun(vPunSEXP);
    Rcpp::traits::input_parameter< const List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const bool >::type print_output(print_outputSEXP);
    Rcpp::traits::input_parameter< bool >::type boCountFrom1(boCountFrom1SEXP);
    __result = Rcpp::wrap(abSan_rComponent_cpp(iA, set, vPun, model, print_output, boCountFrom1));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type iA(iASEXP );
        Rcpp::traits::input_parameter< const List >::type set(setSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type vPun(vPunSEXP );
        Rcpp::traits::input_parameter< const List >::type model(modelSEXP );
        Rcpp::traits::input_parameter< const bool >::type print_output(print_outputSEXP );
        Rcpp::traits::input_parameter< bool >::type boCountFrom1(boCountFrom1SEXP );
        NumericMatrix __result = abSan_rComponent_cpp(iA, set, vPun, model, print_output, boCountFrom1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// abSan_rCore
NumericMatrix abSan_rCore(const List set, const NumericVector vPun, const List model, const bool print_output, bool boCountFrom1);
RcppExport SEXP abSan_abSan_rCore(SEXP setSEXP, SEXP vPunSEXP, SEXP modelSEXP, SEXP print_outputSEXP, SEXP boCountFrom1SEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List >::type set(setSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type vPun(vPunSEXP);
    Rcpp::traits::input_parameter< const List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const bool >::type print_output(print_outputSEXP);
    Rcpp::traits::input_parameter< bool >::type boCountFrom1(boCountFrom1SEXP);
    __result = Rcpp::wrap(abSan_rCore(set, vPun, model, print_output, boCountFrom1));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const List >::type set(setSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type vPun(vPunSEXP );
        Rcpp::traits::input_parameter< const List >::type model(modelSEXP );
        Rcpp::traits::input_parameter< const bool >::type print_output(print_outputSEXP );
        Rcpp::traits::input_parameter< bool >::type boCountFrom1(boCountFrom1SEXP );
        NumericMatrix __result = abSan_rCore(set, vPun, model, print_output, boCountFrom1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
// bind_par_cpp
NumericMatrix bind_par_cpp(const List lA);
RcppExport SEXP abSan_bind_par_cpp(SEXP lASEXP) {
BEGIN_RCPP
<<<<<<< HEAD
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List >::type lA(lASEXP);
    __result = Rcpp::wrap(bind_par_cpp(lA));
    return __result;
=======
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const List >::type lA(lASEXP );
        NumericMatrix __result = bind_par_cpp(lA);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
>>>>>>> ef46f19489b74d7f9a0702d745f86ef7f18bcffd
END_RCPP
}
